import cv2
import time
import random
import numpy as np


def detect_faces(frame, face_cascade):
    """Detect faces in a frame and return bounding boxes."""
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(
        gray,
        scaleFactor=1.3,
        minNeighbors=5,
        minSize=(30, 30)
    )
    return faces


def draw_random_shape(frame, faces):
    """Draw random shapes around detected faces."""
    for (x, y, w, h) in faces:
        shape_type = random.choice(["circle", "ellipse", "polygon"])

        if shape_type == "circle":
            center = (x + w // 2, y + h // 2)
            radius = max(w, h) // 2
            cv2.circle(frame, center, radius, (0, 255, 0), 3)

        elif shape_type == "ellipse":
            center = (x + w // 2, y + h // 2)
            cv2.ellipse(frame, center, (w // 2, h // 2),
                        angle=0, startAngle=0, endAngle=360,
                        color=(255, 0, 0), thickness=3)

        elif shape_type == "polygon":
            pts = np.array([
                [x, y],
                [x + w, y],
                [x + w, y + h],
                [x, y + h]
            ])
            cv2.polylines(frame, [pts], isClosed=True, color=(0, 0, 255), thickness=3)

    return frame


def change_background(frame, color=(50, 50, 200)):
    """Change the background color (simple overlay)."""
    overlay = np.full(frame.shape, color, dtype=np.uint8)
    blended = cv2.addWeighted(overlay, 0.3, frame, 0.7, 0)  # 0.3 = bg intensity
    return blended


def run_webcam(face_cascade):
    """Run face detection using webcam with random shapes + bg color change."""
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("[ERROR] Cannot access webcam")
        return

    prev_time = 0
    while True:
        ret, frame = cap.read()
        if not ret:
            print("[ERROR] Failed to grab frame")
            break

        # Change background
        frame = change_background(frame, color=(100, 0, 150))

        # Calculate FPS
        curr_time = time.time()
        fps = 1 / (curr_time - prev_time) if prev_time > 0 else 0
        prev_time = curr_time

        # Detect and draw random shapes on faces
        faces = detect_faces(frame, face_cascade)
        frame = draw_random_shape(frame, faces)

        # Add FPS text
        cv2.putText(frame, f"FPS: {fps:.2f}", (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

        cv2.imshow("Face Detection with Shapes + BG Color", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()


def main():
    face_cascade = cv2.CascadeClassifier(
        cv2.data.haarcascades + "haarcascade_frontalface_default.xml"
    )
    run_webcam(face_cascade)


if __name__ == "__main__":
    main()
